package javamainl;
import java.util.Scanner;
import java.util.Arrays;

//오버라이딩이란 하위클래스가 상위클래스를 사용할 때 반드시 있는 그대로를 사용해야하나? 바꿀수는 없는가?라는 아이디어에서 나온 것이다.
class calculator{
	int left, right;
	public void setoprands(int left, int right){
		this.left = left;
		this.right = right;
	
		
	}
	public void sum() {
		System.out.println(this.left + this.right);
	}
	public int avg() {
		return ((this.left + this.right)/2);
	}
}
class substractcalculator extends calculator{
	public void sum() {
		System.out.println("실행 결과는" + (this.left + this.right)+ "입니다.");
	} //부모클래스에 있던 sum메소드를 오버라이딩하려고 substractcalculator 자식클래스에서 변경한 것이다.
	//이렇게 바꾸게 되면 실행할 때에는 오버라이딩되어 자식클래스에 있는 변경된 메소드가 출력된다,
	public void substract() {
		System.out.println(this.left - this.right);
	}
	public int avg() {
		return super.avg();
	}
}
public class javapractice {
	
	public static void main(String[] args) {
		substractcalculator c1 = new substractcalculator();
		c1.setoprands(30,20);
		c1.sum();		
		System.out.println("실행 결과는"+ c1.avg());
	}			
}
//자식생성자가 부모생성자를 상속받으려면 명시적으로 부모생성자의 기본 생성자를 가져와야하는데 부모생성자의 매개선수가 있으면 기본생성
//자가 아니기 떄문에 기본생성자를 따로 만들어주고, supe()을 이용해서 자식 클래스가 부모 클래스에게 무엇을 상속받았는지 알려줘야한다.
//따라서super()을
//주의할 점! 변경하기 위해선 상위클래스와 타입이 똑같아야한다. 상위클래스에서 void이면 하위클래스에서도 void여야하고,int면 int
//void는 참고로 반환형식이 없는 타입.
//또한 부모클래스에 있는 메소드와 오버라이딩 한 메소드 가 중복되면 안됨. ->이를 위해 super.avg();로 부모클래스 생성자를 불러와 리턴함
